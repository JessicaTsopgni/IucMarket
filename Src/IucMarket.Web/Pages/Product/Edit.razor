@page "/product/edit/{id?}"
@inject HttpClient Http
@inject NavigationManager navigationManager
<h2><a href="product" class="text-dark" style="text-decoration:none">
    <span class="fas fa-arrow-left"></span></a> Edit a product</h2>
@if (!isLoaded)
{
    <Loading></Loading>
}
else
{
    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div>
            <div class="row @(string.IsNullOrEmpty(message) ? "d-none" : "")">
                <div class="col-sm-12">
                    <div class="alert alert-@messageType text-truncate">
                        @message
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-4">
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Pictures"><i style="width:20px" class="fas fa-images"></i></span>
                            </div>
                            <div class="custom-file">
                                <InputFile OnChange="@LoadFiles" multiple accepts="images/*" class="custom-file-input" aria-label="Pictures" aria-describedby="Pictures" />
                                <label class="custom-file-label" for="Picture">Choose picture</label>
                            </div>
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Pictures)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div id="carouselExampleControls" class="carousel border" data-ride="carousel">
                            <div class="carousel-inner text-center" style="height:200px">
                                @if(model.Pictures != null)
                                {
                                    int i = 0;
                                    foreach (var file in model.Pictures)
                                    {
                                        <div class="carousel-item @(i == 0 ? "active" : "")">
                                            <img class="img-fluid" style="max-height:200px" src="@file.Path" alt="@file.FileName">
                                            <div class="card-img-overlay text-right mr-4" style="opacity:0.5">
                                                <a href="javascript:;" title="Remove picture" @onclick="(() => deletePicture(file.FileName))">
                                                    <i class="fas fa-minus-circle text-danger"></i>
                                                </a>
                                            </div>
                                        </div>
                                        i++;
                                    }
                                }
                            </div>
                            @if ((model.Pictures?.Count ?? 0) > 1)
                            {
                                <a class="carousel-control-prev" href="#carouselExampleControls" role="button" data-slide="prev">
                                    <span class="fas fa-angle-left text-info" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#carouselExampleControls" role="button" data-slide="next">
                                    <span class="fas fa-angle-right text-info" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            }
                        </div>
                        <a href="javascript:;" class="text-danger small" @onclick="clearFiles">Clear all</a>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Reference"><i style="width:20px" class="fas fa-barcode"></i></span>
                            </div>
                            <InputText @bind-Value="model.Reference" type="text" maxlength="5" s class="form-control text-uppercase" placeholder="Product code" aria-label="Reference" aria-describedby="Reference" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Reference)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Name"><i style="width:20px" class="fas fa-tag"></i></span>
                            </div>
                            <InputText @bind-Value="model.Name" class="form-control" placeholder="Product name" aria-label="Name" aria-describedby="Name" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Name)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Price"><span style="width:20px;font-size:11px">@model.Currency</span></span>
                            </div>
                            <InputNumber @bind-Value="model.Price" class="form-control" placeholder="Product price" aria-label="Price" aria-describedby="Price" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Price)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Category"><i style="width:20px" class="fas fa-layer-group"></i></span>
                            </div>
                            <InputSelect @bind-Value="model.CategoryId" class="form-control" aria-label="Category" aria-describedby="Category">
                                @if (model.Categories != null)
                                {
                                    <option value="">Choose the product category</option>
                                    foreach (var category in model.Categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.CategoryId)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Owner"><i style="width:20px" class="far fa-copyright"></i></span>
                            </div>
                            <InputSelect @bind-Value="model.OwnerId" class="form-control" aria-label="Owner" aria-describedby="Owner">
                                @if (model.Owners != null)
                                {
                                    <option value="">Choose the product owner</option>
                                    foreach (var owner in model.Owners)
                                    {
                                        <option value="@owner.Id">@owner.Fullname</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.OwnerId)" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Description"><i style="width:20px" class="fas fa-info-circle"></i></span>
                            </div>
                            <InputTextArea style="height:145px" @bind-Value="model.Description" class="form-control" placeholder="Product description" aria-label="Description" aria-describedby="Description" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Description)" />
                        </div>
                    </div>
                    <div>
                        <div class="custom-control custom-checkbox mt-4">
                            <InputCheckbox class="custom-control-input" id="Status" @bind-Value="model.Status" />
                            <label class="custom-control-label" for="Status">Enable/Disable</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group mt-4">
                            <button type="submit" disabled="@isBusy" class="btn btn-success btn-block">
                                <i class="fas fa-save"></i> Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>

}
@code{
    private bool isBusy = false;
    private bool isLoaded = true;
    private MessageType messageType = MessageType.danger;
    private string message = string.Empty;
    private ProductCreateModel model = new ProductCreateModel();
    private ProductDto product = null;
    private EditContext context;

    private long maxFileSize = 1024 * 1024 * 5;
    private int maxAllowedFiles = 6;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoaded = false;
            var response = await Http.GetAsync($"Account/Owners");
            string json = string.Empty;
            if (response.IsSuccessStatusCode)
            {
                json = await response.Content.ReadAsStringAsync();
                var list = JsonConvert.DeserializeObject<ListDto<UserDto>>(json);
                model.Owners = list.Items.Select
                (
                    x =>
                    new UserListModel
                    (
                        x.UserId,
                        x.Email,
                        x.PhoneCountryCode,
                        x.PhoneNumber,
                        x.RegistrationNumber,
                        x.FullName,
                        x.CreatedAt,
                        x.Role,
                        x.Status
                    )
                );
            }
            else
            {
                messageType = MessageType.danger;
                message = await response.Content.ReadAsStringAsync();
            }

            response = await Http.GetAsync($"ArticleType/Index");
            if (response.IsSuccessStatusCode)
            {
                json = await response.Content.ReadAsStringAsync();
                var list = JsonConvert.DeserializeObject<ListDto<CategoryDto>>(json);
                model.Categories = list.Items.Select
                (
                    x =>
                    new CategoryListModel
                    (
                        x.Id,
                        x.Name
                    )
                );
            }
            else
            {
                messageType = MessageType.danger;
                message = await response.Content.ReadAsStringAsync();
            }

            if (!string.IsNullOrEmpty(Id))
            {
                response = await Http.GetAsync($"Article/{Id}");
                if (response.IsSuccessStatusCode)
                {
                    json = await response.Content.ReadAsStringAsync();
                    product = JsonConvert.DeserializeObject<ProductDto>(json);
                    model = new ProductCreateModel
                    (
                        product.Id,
                        product.Reference,
                        product.Name,
                        product.Description,
                        product.Price,
                        product.Currency,
                        product.Pictures?.Select
                        (
                            x =>
                            new FileInfoModel
                            (
                                x.Path,
                                x.Name,
                                x.ContentType
                            )
                        ).ToList() ?? new List<FileInfoModel>(),
                        product.Category?.Id,
                        model.Categories,
                        product.Owner?.UserId,
                        model.Owners,
                        product.Status
                    );
                }
                else
                {
                    messageType = MessageType.danger;
                    message = await response.Content.ReadAsStringAsync();
                }
            }

        }
        catch (Exception ex)
        {
            messageType = MessageType.danger;
            message = $"Error : {ex.Message}";
        }
        finally
        {
            isLoaded = true;
            context = new EditContext(model);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (context.Validate())
            {
                isBusy = true;
                messageType = MessageType.info;
                message = "Processing...";

                if (string.IsNullOrEmpty(Id))
                {
                    var response = await Http.PostAsync
                    (
                        $"Article",
                        GetContent()
                    );
                    if (response.IsSuccessStatusCode)
                    {
                        model = new ProductCreateModel(model.Categories, model.Owners);
                        messageType = MessageType.success;
                        message = "Save done !";
                        await InvokeAsync(StateHasChanged);
                        await Task.Delay(2000);
                        message = string.Empty;
                    }
                    else
                    {
                        messageType = MessageType.danger;
                        message = await response.Content.ReadAsStringAsync();
                    }
                }
                else
                {
                    var response = await Http.PutAsync
                    (
                        $"Article/{Id}",
                        GetContent()
                    );
                    if (response.IsSuccessStatusCode)
                    {
                        messageType = MessageType.success;
                        message = "Save done !";
                        await InvokeAsync(StateHasChanged);
                        await Task.Delay(2000);
                        navigationManager.NavigateTo("product");
                    }
                    else
                    {
                        messageType = MessageType.danger;
                        message = await response.Content.ReadAsStringAsync();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            messageType = MessageType.danger;
            message = $"Error : {ex.Message}";
        }
        finally
        {
            isBusy = false;
        }
    }

    MultipartFormDataContent GetContent()
    {
        MultipartFormDataContent content = new MultipartFormDataContent();
        var json = JsonConvert.SerializeObject
        (
            new ProductAddCommand
            (
                model.Reference,
                model.Name,
                model.Description,
                model.Price ?? 0,
                model.Currency,
                model.Pictures?.ToDictionary(x => x.FileName, y=> y.ContentType),
                model.CategoryId,
                model.OwnerId,
                model.Status
            )
        );
        content.Add
        (
            new StringContent
            (
                json,
                System.Text.Encoding.UTF8, "application/json"
            ),
            "\"Product\""
        );
        foreach (var picture in model.Pictures)
            content.Add
            (
                new StreamContent
                (
                    picture.File?.OpenReadStream() ?? new System.IO.MemoryStream()
                ),
                "\"pictures\"",
                picture.FileName
            );
        return content;
    }

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            isBusy = true;
            messageType = MessageType.info;
            message = "Processing...";
            //loadedFiles.Clear();

            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                //using var reader =
                //    new StreamReader(file.OpenReadStream(maxFileSize));
                //var b = ReadFully(reader.BaseStream);
                model.Pictures.Add
                (
                    new FileInfoModel
                    (
                        file,
                        Convert.ToBase64String(await ReadFully(file.OpenReadStream(maxFileSize)))
                    )
                );
            }
            message = string.Empty;
        }
        catch (Exception ex)
        {
            messageType = MessageType.danger;
            message = $"Error : {ex.Message}";
        }
        finally
        {
            isBusy = false;
        }
    }

    void clearFiles()
    {
        model.Pictures.Clear();
    }

    void deletePicture(string fileName)
    {
        model.Pictures.Remove(model.Pictures.First(x => x.FileName == fileName));
    }

    private async Task<byte[]> ReadFully(System.IO.Stream input)
    {
        byte[] buffer = new byte[16 * 1024];
        using (var ms = new System.IO.MemoryStream())
        {
            int read;
            while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                ms.Write(buffer, 0, read);
            }
            return ms.ToArray();
        }
    }
}