@page "/user"
@page "/user/index"
@inject HttpClient Http
@inject IJSRuntime JS;
<h2>User list</h2>
<div class="text-right mb-2">
    <NavLink class="btn btn-success" href="user/edit">
        <span class="fas fa-plus" aria-hidden="true"></span> New
    </NavLink>
</div>
<div class="row @(string.IsNullOrEmpty(message) ? "d-none": "")">
    <div class="col-sm-12">
        <div class="alert alert-@messageType text-truncate">
            @message
        </div>
    </div>
</div>
@if (isLoadingData)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Name</th>
                <th>Role</th>
                <th>Created at</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (users != null && users.Count() != 0)
            {
                foreach (var user in users)
                {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Fullname</td>
                    <td>@user.Role</td>
                    <td>@user.CreatedDate.ToShortDateString()</td>
                    <td>@user.Status</td>
                    <td>
                        <a disabled="@isBusy" href="user/edit/@user.Id" class="text-primary" title="Edit"><span class="oi oi-pencil"></span></a>
                        <a disabled="@isBusy" href="javascript:;" @onclick="() => HandleDelete(user.Id, user.Fullname)" title="Delete" class="text-danger"><span class="oi oi-trash"></span></a>
                    </td>
                </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6"><em>User not found !</em></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<UserListModel> users;
    private string message = string.Empty;
    private MessageType messageType = MessageType.danger;
    private bool isBusy = false;
    private bool isLoadingData = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
        }
        catch(Exception ex)
        {
            messageType = MessageType.danger;
            message = $"Error : {ex.Message}";
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoadingData = true;

            var response = await Http.GetAsync($"account/index");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var userList = JsonConvert.DeserializeObject<Entities.UserList>(json);
                users = userList.Users.Select(x => new UserListModel
                (
                    x.Id,
                    x.Email,
                    x.FullName,
                    x.CreatedAt,
                    x.Role,
                    x.Status
                )).ToArray();
            }
            else
            {
                messageType = MessageType.danger;
                message = await response.Content.ReadAsStringAsync();
            }
        }
        catch(Exception ex)
        {
            throw ex;
        }
        finally
        {
            isLoadingData = false;
        }
    }

    private async Task HandleDelete(string id, string name)
    {
        try
        {
            isBusy = true;
            messageType = MessageType.info;
            message = "Processing...";
            var result = await JS.InvokeAsync<bool>("confirmDelete", name);
            if (result)
            {
                var response = await Http.DeleteAsync($"account/{id}");
                if (response.IsSuccessStatusCode)
                {
                    messageType = MessageType.success;
                    message = "Delete done !";
                    await InvokeAsync(StateHasChanged);
                    await Task.Delay(1000);
                    await LoadData();
                }
                else
                {
                    messageType = MessageType.danger;
                    message = await response.Content.ReadAsStringAsync();
                }
            }
        }
        catch(Exception ex)
        {
            messageType = MessageType.danger;
            message = $"Error : {ex.Message}";
        }
        finally
        {
            isBusy = false;
        }
    }
}
