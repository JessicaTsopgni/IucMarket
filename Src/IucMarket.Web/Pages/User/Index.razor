@page "/user/index"
@inject HttpClient Http
<h1>User list</h1>
<div class="row @(string.IsNullOrEmpty(message) ? "d-none": "")">
    <div class="col-sm-6">
        <div class="alert alert-danger">
            @message
        </div>
    </div>
</div>
@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Name</th>
                <th>Created at</th>
                <th>Status</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Email</td>
                    <td>@user.Fullname</td>
                    <td>@user.CreatedDate.ToShortDateString()</td>
                    <td>@user.Status</td>
                    <td>
                        <a href="user/edit?id=@user.Uid" class="btn btn-primary"><span class="oi oi-pencil"></span></a>
                        <a href="javascript:;" @onclick="() => HandleDelete(user.Uid)" class="btn btn-danger"><span class="oi oi-trash"></span></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private UserListModel[] users;
    private string message = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var response = await Http.GetAsync($"user");
        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var userList = JsonConvert.DeserializeObject<Entities.UserList>(json);
            var users = userList.Users.Select(x => new UserListModel(x.Id, x.Email, x.FullName, x.CreatedAt, x.Status));
        }
        else
        {
            message = await response.Content.ReadAsStringAsync();
        }
    }

    private void HandleDelete(string id)
    {

    }
}
