@page "/user/edit/{id?}"
@inject HttpClient Http
@inject NavigationManager navigationManager
<h2>
    <a href="user" class="text-dark" style="text-decoration:none">
    <span class="fas fa-arrow-left"></span></a> Edit a user
</h2>
@if (!isLoaded)
{
    <Loading></Loading>
}
else
{
    <EditForm Model="@model" OnValidSubmit="@HandleValidSubmit" autocomplete="off">
        <DataAnnotationsValidator />
        <div class="offset-sm-1">
            <div class="row @(string.IsNullOrEmpty(message) ? "d-none": "")">
                <div class="col-sm-10">
                    <div class="alert alert-@messageType text-truncate">
                        @message
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-sm-5">
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Email"><i style="width:20px" class="fas fa-at"></i></span>
                            </div>
                            <InputText @bind-Value="model.Email" type="email" class="form-control" placeholder="Enter user email" aria-label="Email" aria-describedby="Email" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Email)" autocomplete="off" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="ResgistrationNumber"><span style="width:20px;font-size:12px">@model.RegistrationNumber</span></span>
                            </div>
                            <InputText @bind-Value="model.RegistrationNumber" maxlength="20" class="form-control" placeholder="Enter registration number" aria-label="Matricule" aria-describedby="ResgistrationNumber" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.RegistrationNumber)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Fullname"><i style="width:20px" class="fas fa-user"></i></span>
                            </div>
                            <InputText @bind-Value="model.Fullname" autocomplete="off" class="form-control" placeholder="Enter user full name" aria-label="Fullname" aria-describedby="Fullname" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Fullname)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="PhoneNumber"><span style="width:20px;font-size:12px">@model.PhoneCountryCode</span></span>
                            </div>
                            <InputNumber @bind-Value="model.PhoneNumber" class="form-control" placeholder="Enter user phone number" aria-label="PhoneNumber" aria-describedby="PhoneNumber" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.PhoneNumber)" />
                        </div>
                    </div>
                </div>
                <div class="col-sm-5">
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Role"><i style="width:20px" class="fas fa-users"></i></span>
                            </div>
                            <InputSelect @bind-Value="model.Role" class="custom-select" aria-label="Role" aria-describedby="Role">
                                @foreach (var value in Enum.GetValues(typeof(RoleOptions)))
                                    {
                                    <option>@value</option>
                                    }
                            </InputSelect>
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Role)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="Password"><i style="width:20px" class="fas fa-lock"></i></span>
                            </div>
                            <InputText @bind-Value="model.Password" autocomplete="off" type="password" class="form-control" placeholder="Enter user password" aria-label="Password" aria-describedby="Password" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.Password)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="ConfirmPassword"><i style="width:20px" class="fas fa-lock"></i></span>
                            </div>
                            <InputText @bind-Value="model.ConfirmPassword" autocomplete="off" type="password" class="form-control" placeholder="Confirm user password" aria-label="ConfirmPassword" aria-describedby="ConfirmPassword" />
                        </div>
                        <div class="small">
                            <ValidationMessage For="@(() => model.ConfirmPassword)" />
                        </div>
                    </div>
                    <div class="mb-4">
                        <div class="custom-control custom-checkbox mt-4">
                            <InputCheckbox class="custom-control-input" id="Status" @bind-Value="model.Status" />
                            <label class="custom-control-label" for="Status">Enable/Disable</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <button type="submit" disabled="@isBusy" class="btn btn-success btn-block">
                                <i class="fas fa-save"></i> Save
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>

}
@code{
    private bool isBusy = false;
    private bool isLoaded = true;
    private MessageType messageType = MessageType.danger;
    private string message = string.Empty;
    private UserCreateModel model = new UserCreateModel();
    private UserDto user = null;
    private EditContext context;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoaded = false;
            if (!string.IsNullOrEmpty(Id))
            {
                var response = await Http.GetAsync($"Account/{Id}");
                if (response.IsSuccessStatusCode)
                {
                    var json = await response.Content.ReadAsStringAsync();
                    user = JsonConvert.DeserializeObject<UserDto>(json);
                    model = new UserCreateModel(user.UserId, user.Email, user.RegistrationNumber, null, null, user.FullName, user.PhoneCountryCode, user.PhoneNumber, user.Role, user.Status);
                }
                else
                {
                    messageType = MessageType.danger;
                    message = await response.Content.ReadAsStringAsync();
                }
            }
        }
        catch (Exception ex)
        {
            messageType = MessageType.danger;
            message = $"Error : {ex.Message}";
        }
        finally
        {
            isLoaded = true;
            context = new EditContext(model);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (context.Validate())
            {
                isBusy = true;
                messageType = MessageType.info;
                message = "Processing...";
                if (string.IsNullOrEmpty(Id))
                {
                    var response = await Http.PostAsJsonAsync
                    (
                        $"Account",
                        new RegisterCommand
                        (
                            model.Email,
                            model.RegistrationNumber,
                            model.Password,
                            model.Fullname,
                            model.PhoneCountryCode,
                            model.PhoneNumber ?? 0,
                            false,
                            model.Role,
                            model.Status
                        )
                    );
                    if (response.IsSuccessStatusCode)
                    {
                        model = new UserCreateModel();
                        messageType = MessageType.success;
                        message = "Save done !";
                        await InvokeAsync(StateHasChanged);
                        await Task.Delay(2000);
                        message = string.Empty;
                    }
                    else
                    {
                        messageType = MessageType.danger;
                        message = await response.Content.ReadAsStringAsync();
                    }
                }
                else
                {
                    var response = await Http.PutAsJsonAsync
                    (
                        $"Account/{Id}",
                        new RegisterCommand
                        (
                            model.Email,
                            model.RegistrationNumber,
                            model.Password,
                            model.Fullname,
                            model.PhoneCountryCode,
                            model.PhoneNumber ?? 0,
                            false,
                            model.Role,
                            model.Status
                        )
                    );
                    if (response.IsSuccessStatusCode)
                    {
                        messageType = MessageType.success;
                        message = "Save done !";
                        await InvokeAsync(StateHasChanged);
                        await Task.Delay(2000);
                        navigationManager.NavigateTo("user");
                    }
                    else
                    {
                        messageType = MessageType.danger;
                        message = await response.Content.ReadAsStringAsync();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            messageType = MessageType.danger;
            message = $"Error : {ex.Message}";
        }
        finally
        {
            isBusy = false;
        }
    }
}